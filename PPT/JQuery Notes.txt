JQuery :
========
1) What is JQuery

Jquery is a lightweight JavaScript library that simplifies programming with Javascript.

According to JQuery.com
JQuery is a fast, small, and feature-rich Javascript library. It makes things like HTML
document traversal and manipulation, event handling, animation and Ajax much simpler
with an easy-to-use API that works across a multitude of browsers.

*with a combination of versatility and extensibility, jquery has changed the way that millions of
people write javascript.

* why should we use JQuery

- The use of JQuery has several benefits over using the raw javascript

* JQuery is cross-browser
* JQuery is a lot more easy to use than raw javascript
* JQuery is extensible
* JQuery simplifiers and has rich AJAX support
* JQuery has large development community and many plugins. Ex: autocomplete textbox plugin.
* Excellent documentation.

How to use JQuery in a Web application.

Download the Jquery file from JQuery.com and reference it in ur application just like
any other JAvascript file.

* wt is the difference b/w JQuery 1.x and JQuery 2.x
- If you want to support IE(Internet Exploxer)6/7/8 , then use JQuery 1.x where as if you don't have the need to support
IE6/7/8 then use JQuery 2.x. JQuery 2.x is smaller in size than JQuery 1.x.

compressed -JQuery.min.js --It is suitable to production phase.(remove white spaces)
Uncompressed - JQuery.js -- It is suitable to development phase.


Ex:Raw javascript
    <script>

        window.onload = function () { //onload--fires immediately when open browser.
            if (document.addEventListener) {
                document.getElementById("btn").addEventListener('click', clickHandler, false);
            }
            else {
                document.getElementById("btn").addEventListener('onclick', clickHandler)
            }
            
        };

        function clickHandler() {
            //document.write("Hello");
            alert("hello");
        }

    </script>

OR

 //using jQuery
            jQuery(document).ready(function () {
                jQuery("#btn").click(function () {
                    alert("hello");
                })
        });

With JQuery we have less code to achieve the same thing. we don't have to worry about cross-browser issues, as all this is taken
care by jQuery.

Points to remember:
1. ready() function ensures that the DOM is fully loaded.
2. $ is a shortcut for JQuery.
3. All three of the following syntaxes are equivalent:
   $(document).ready(handler)
   $().ready(handler)(this is not recommended)
   $(handler)

     //It is annoymus method
            $(function () {
                $("#btn1").click(function () {
                    alert("I am method 2");
                })
            })

2. What is $document ready function:

* $(document).ready is a JQuery event. It fires as soon as the DOM is loaded & ready to be manipulated by script. This is the earliest
point in the page load process where the script can safely access elements in the page's html dom. This event is fired before all the images,
css etc.. are fully loaded.


Note: 
In the following ex, we have removed the ready() method. when you click the button now, you don't get the alert. This is bcoz the JQuery code is present before the button element,
so by the time the jQuery code is executed the button elements is not loaded into DOM.

To make this ex, you have 2 options
* plz ur jquery code in $(document).ready function OR
* plz ur script at the bottom of the page just before the closing </body> element.

* $(window).load event fires when the DOM and all the content on the page(image, css etc.)is fully loaded. since the window load event waits for
images, css etc to be fully loaded, this event fires after ready event.


* In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. So ready() is usually the best place to write
your javascript code. However, in your application there could be scenarios wherye you should be using 
$(window).load over $(document).ready.
Ex: 
    $(window).load(function () {
            $("#div1").html("height: " + $("#img").height + "width " + $("#img").width);
        });

o/p: heith : something width: something

change --$(document).ready()
           ......
o/p: height: 0 width: 0

3) Benefits of using CDN:
CDN: It stands for content Delivery Network. A CDN is a system of distributed servers that hosts resources such as 
images, css, Javascript files etc..

companies like MIrcrosoft, Google, yahhoo etc have a free public CDN from which we can load jQuery instead of 
hosting it on our own web server.

https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview--CDN
Benefits of using CDN:
1. Distributed CDN server
2. Browser Caching
3. Parallel Downloads
4. Reduced server load
Disadvantage : Your client firewalls may block the CDN. so you may have to request ur clients to whitelist the 
CDN.

<script>
window.jQuery || document.write("<script src='jquery-1.11.2.js'></script>");
</script>

4)Selectors
===========
JQuery selectors : one of the most important concept in JQuery is selectors. JQuery 
selectors allow you to select and manipulate HTML elements

Different selectors in Jquery.
JQuery selectors allow you to select html elements in the DOM by
1. Element ID
2. Element TagName
3. Element ClassName
4. Element attribute
5. Element Attribute values and many more.

* HTML element IDs must be unique on the page. JQuery #id selector returns only the first element, if you have 2 or more elements with the 
same ID.
* Javascript document.getElementById() function throws an error if the element with the given id is not found, where as Jquery #id selector will not throw an error. To check
if an element is returned by the #id selector use length property.

* getElementById & JQuery(#id) selectors are not same.
getElementById returns a raw DoM object where as jQuery(#id) selector returns a JQuery object . Easily call to jQuery methods like css,click() etc...


* document.getElementById() is faster than Jquery('#id') selector.
      //document.getElementById("btn2").style.backgroundColor = 'green';

//checking purpose...
if ($("#btn1").length > 0) {
                        document.write("element is found");
                    }
                    else {
                        document.write("not found");
                    }


5) Element Selector:
To select the elements by tag name use jQuery Element Selector
syn: $(element)
ex: $('td') //selects all td elements
$('div a')// select all anchor elements that are descendants of div element
$('div, span, a')// selects all div, span and anchor elements


ex: 
  $(document).ready(function () {
            $("div #h1").css('background-color', 'green');
        });
*first go div tag,then next go to #h1 id...

At time.
$('div,a,h1').css('background-color','green');

* select all anchor elements that are descendants of div element
  Ex: $('div a').css('background-color','yellow')

* Changes the background color of even rows to gray and odd rows to yellow in both the tables
ex: $('tr:even').css('background-color','gray');
    $('tr:odd').css('background-color','yellow');

6) JQuery class selector:
========================
* Jquery class selector- selecting elements using their css class name.
syn: $(".class")
* JQuery class selectors uses javascript's native getElementByClassName() function if the browser supports it
$('.small') --selects all elements with class small
$('.small,.big')--selects all elements with class small or big
$('div.small,.big')--selects div elements with class small & any element with class big.

* Selects all elements that has both the classes - small & big. There should be no  space b/w the 
class names
$(document).ready(function(){
 $('.small.big').css('border','5px solid red');
});

or another solution is :    $(".class1").filter('.first').css('border', '5px solid pink');//using filter method

7)JQuery attribute selector:

* JQuery attribute selector i.e. selecting elements that have specified attribute and/or specified attribute values.
syntax:
$('[attribute]')
$('[attribute="value"]')
ex:
$('[title]')//selects all elements that have title attribute
$('div[title]')//selects all div elements that have title attribute
$('[title="divTitle"]')//selects all elements that have title attribute value -divTitle
$('div[title="divTitle"]')//selects all div elements that have title attribute value- divTitle

ex: $('h2[title="h2"]').css('background-color', 'red');

$('[title=\'h2\']').css()--escape black slash
$('[title=\"h2\"]').css()

* Selects all div elements with both title & style attributes, & sets 5px solid black border
ex: $('div[title][style]').css()
* Selects all div elements with title attribute value - divtitle, and style attribute value-background-color:red
and sets 5px solid black border
Ex: $('div[title="divtitle"][style="background-color:red"]').css()

* selects all div elements with either title or style attributes  & sets 5px solid black border
ex: $('div[title],[style]').css()


8) JQuery attribute value selector:

* Attribute Equals Selector[name="value"]
* Attribute Not Equal Selector[name!="value"]
* Attribute contains Selector[name*="value"]
* Attribute contains Word Selector[name~="value"]
* Attribute contains Prefix Selector[name!="value"]
* Attribute Starts with Selector[name^="value"]
* Attribute Ends with Selector[name$="value"]

Examples:
* $('[title="div1Tile"]') --Selects all elements that have tile attribute value equal to div1Title
* $('[title!="div1Tile"]') --Selects all elements that have title attribute value not equal to div1Title.
OR $('div:not([title="div1Title"])').css('border','5px solid red');
* $('[title="Title"]')-- Selects all elements that have title attribute value containing the given substring - Title
* $('[title~="myspan"]') -- Selects all elements that have title attribute value containing the given word-myspan, delimited by spaces.
* $('[title|="myTitle"]')--selects all elements that have title attribute value equal to myTitle or starting with myTitle followed by a hyphen(-)  .
* $('[title^="div"]')  --- selects all elements that have title attribute value starting with div
* $('[title$="Heading"]') -- Selects all elements that have title attribute value ending with Heading.

9) JQuery case insensitive attribute selector:
==============================================
To make the jQuery attribute value selector case-insenistive

   $('div[title]').filter(function () {
                return $(this).attr('title').toLowerCase() == "div";
            }).css('border','3px solid green')

* Attribute contains selector [name*="value"] is case-sensitive
ex : $('dvi[title*="Div"]').css('border','3px solid red')---only affects Div..not div,DIV..
To make Attribute contains Selector case-insensitive
ex: 
    
            $('div[title]').filter(function () {
                return (/DIV/i).test($(this).attr('title'));
                         OR
                return RegExp('DIV', 'i').test($(this).attr('title'));
            }).css('background-color','red');

i--compare case-insensitive  (ignore case)
ctrl+shift+U--convert to uppercase
Ctrl+U--convert to lowercase

10)Jquery input vs input:
=========================
* Difference b/w $(input) and $(:input)
 Note : $(:input) selects all input, textarea, select and button elements where as 
$(input) just selects elements with an input tag.

ex :$('input') example:
  $(document).ready(function () {
            $('input').each(function () {
                alert($(this).val());
            });
        });

ex:$(:input) example:
   $(document).ready(function () {
            $(':input').each(function () {
                alert($(this).val());
            });
        });

Ex: $(':input[type="text"]')--only text fields selected..
* Which one is better for performance $('input[type="text"]') or $(':input[type="text"]')

* $('input[type="text"]') is better for performance over $(':input[type="text"]')

* This is bcoz $(':input[type="text"]') needs to scan all input elements, textarea, select etc., where as
$('input[type="text"]') scans only input elements.

* So if you want to find elements with an input tag, it is always better to use
$('input[type="text"]') over $(':input[type="text"]')

11) JQuery checked selector
============================
* The : checked selector selects all checked checkboxes or radio buttons.

* Selects all checked radio button elements
$('input[type="radio"]:checked')

ex: radio button
   $("#submitid").click(function () {
                var data = $('input[type="radio"]:checked');
                if (data.length > 0) {
                    $("#result").html(data.val() + " checked");//div tag--id=#result
                }
                else {
                    $("#result").html("No radio checked");
                }
            })

ex: checkboxes
   ==========
            $("#submitid2").click(function () {

                var data = $('input[type="checkbox"]:checked');
                if (data.length > 0) {
                    var results = data.length + "checkboxes selected  ";
                    data.each(function () {
                        results += $(this).val() + "<br/>";
                    });
                    $("#result2").html(results);

                }
                else {
                    $("#result2").html("NO one is selected");
                }
            });


12) Select values of checkbox group with jquery
===============================================
* If you have just one group of checkboxes on your page, to get all the checked checkboxes you
can use $('input[type="checkbox"]:checked')

* If you have more than one checkbox group, $('input[type="checkbox"]:checked') is going
to select all checked checkboxes from both the checkbox groups.

Ex :Multip checkboxes

//multiple checkboxes


            $("#submitid2").click(function () {  // or $('input[name="skills"]').click(function())
                getdata("skills");
            });
            $("#submitid3").click(function () {  // Or $('input[name="city"]').click()
                getdata("city");
            });
            var getdata = function (Name) {
                var data = $('input[name="' + Name + '"]:checked');
                if (data.length > 0) {
                    var results = data.length + "checkboxes selected <br/> ";
                    data.each(function () {
                        results += $(this).val() + "<br/>";
                    });
                    $("#div"+Name).html(results);
                }
                else {
                    $("#div"+Name).html("NO one is selected");
                }
            };


13)jQuery get selected checkbox text:
=====================================

* As we check the checkboxes, we want to display the count of checkboxes checked and their text & values.

Ex:

$("#submitid2").click(function () {  // or $('input[name="skills"]').click(function())
                getdata("skills");
            });
            $("#submitid3").click(function () {
                getdata("city");
            });
            var getdata = function (Name) {
                var data = $('input[name="' + Name + '"]:checked');
                if (data.length > 0) {
                    var results = data.length + "checkboxes selected <br/> ";
                    data.each(function () {
                        var selectedval = $(this).val();
                        results += selectedval + "- " + $('label[for="cb-' + selectedval+'"]').text()+ "<br/>";
                    });
                    $("#div"+Name).html(results);
                }
                else {
                    $("#div"+Name).html("NO one is selected");
                }
            };
<body>

    Skills:
    <input type="checkbox" name="skills" value="Ja" />
    <label for="cb-Ja">Java</label>
    <input type="checkbox" name="skills" value="Jq" />
    <label for="cb-Jq">Jquery</label>
    <input type="checkbox" name="skills" value=".NET" />
    <label for="cb-.NET">.NET</label>
    <input type="checkbox" name="skills" value="py" />
    <label for="cb-py">Python</label>
    <br />

      <input type="submit" id="submitid2" value="Generate Skills" class="btn btn-danger" />
    <input type="submit" id="submitid3" value="Generate cities" class="btn btn-danger" />
    <div id="result2">

    </div>

</body>


14) Jquery selected selector:
============================
* To select all checked checkboxes or radio buttons, we use :checked selector. To select
  all selected options of a select element use :selected selector.

--> How to get selected option text and value from single select dropdown
ex;
        $("#select").click(function () {
                $("#select").change(function () {
                    var selectval = $("#select option:selected");

                    $("#result4").html("value is "+selectval.val() + " Text is" + selectval.text());
                   
                });
            })

*   <select id="select">
        <option value="usa">USA</option>
        <option value="uk">UK</option>
        <option value="ind">India</option>
    </select>

--> How to get all selected options text and value from multi select dropdown

    $("#select").click(function () {
                $("#select").change(function () {
                    var selectval = $("#select option:selected");

                    if (selectval.length > 0) {
                        var resultstr = '';
                        selectval.each(function () {
                            resultstr += "Value is " + $(this).val() + " Text is" + $(this).text();
                        });
                    }

                    //$("#result4").html("value is "+selectval.val() + " Text is" + selectval.text());

                    $("#result4").html(resultstr);
                   
                });
            })


* add one  more attribute line in html <select id="select" multiple>


15) Jquery disabled selector:
=============================
* JQuery disabled selector
* JQuery enabled selector

Ex: selects all disabled elements
//HTML
First Name: <input type="text"  disabled="disabled" value="xyz" /><br />
Last Name: <input type="text" disabled="disabled" value="abc" /><br />

//script

            //disabled purpose

            //$(':disabled').css('border', '3px solid red');

           // $('input:disabled').css('border', '3px solid green');

            $('input[type="text"]:disabled').css('border', '3px solid green');


* JQuery enabled selector:
========================
* selects all enabled elements
 $(':enabled')

* selects all enabled textarea elements & sets 3px solid red border
  $('textarea:enabled').css('border','3px solid red');

16)Jqery each function:
======================
* JQuery each function is used to iterate over the items in a collection. For each item in the collection the 
anonymous function is called. The index of the element and the element itself are passed
to the anonymous function.

    Ex:     $("li").each(function (index,element) {
                alert(index + "  text is " + $(element).text());
            });
Or 
//this --also used
* To refer to the current element that we are iterating over you can also use this keyword
            $("li").each(function (index) {
                alert(index + " text is " + $(this).text())
            });

* If you just need the text of the list item, then you can get rid of the index parameter
  $("li").each(function () {
                alert(" text is " + $(this).text())
            });


* To exit from each function, return false

ex:   $("li").each(function () {
                if ($(this).text() == "Coffee") {
                    return false;
                }
                alert($(this).text());
            })

* Implicit iteration in jQuery : The $('li') selector returns all list item elements. Notice that we are calling the css() jquery function
on the jquery collection itself. In this case, css() method implicitly over each element in the entire collection.
ex : $('li').css('color','red');

each function():

* There is no need to explicitly iterate over each element in the collection. Most jQuery methods implicitly iterate over
the entire collection.

Performance considerations when using jquery each function
1. jQuery needs to search the DOM for div element with id=divResult, for each list item in the collection. Performance can be improved by 
caching divResult element.
2. The DOM element is being updated on each iteration of the loop. To improve the performance build a string variable
with the required data and then update the DOM element outside of the loop.
This ensures that the DOM element is updated onlu once.
ex: 
$('li').each(function () {
                $('#first').html($("#first").html() + "<br/>" + $(this).text());
            })

Ex: another way
//var divelement=$("#first");
 var result = '';
            $('li').each(function () {

                // divelement.html(divelement.html() + "<br/>" + $(this).text());
                result += '<br/>' + $(this).text();
            });

            $("#first").html(result);


17) jQuery method chaining:
===========================
Ex:
  //$('li').css('color', 'green');
            //$('li').slideUp(1000);
            //$('li').slideDown(1000);
            //$('li').attr('title', 'Mytitle');
             
	     (OR)
            $('li').css('color', 'red').slideUp(1000).slideDown(1000).attr('title', 'it is value');


* When chaining methods, the line of code will become quite long and the readability will be lost. To improve
the readability of the code you can format chained methods as shown below.
$('li')
.css('color', 'green');
 .slideUp(1000);
 .slideDown(1000);
 .attr('title', 'Mytitle');

Note:
* when will method chaining not work : Method chaining will not work if a method in the chain does not return an object. In the ex, text() method returns
a string that contains the text of all the list items and not an object. Hence the chaining does not work in this case.

ex:  $('li').text().css('color', 'red').slideUp(1000).slideDown(1000).attr('title', 'it is value');

$('li')
.css('color', 'red')--it is worked
.slideUp(1000)--It is worked
.slideDown(1000)--It is worked
.text()---It is not worked--bcoz it's returns string
.attr('title', 'it is value');--so it not work bcoz, .text() stoped..


* Method chaining works, if you use text() method to set the value for the list item. in this case, text() method sets a value for each list item
in the jquery collection object & returns that collection object. Hence the chaining works.

ex: .text('my value').

18) What is JSON:
   ==============
* JSON stands for JavaScript Object Notation. JSON is a lightweight data-interchange format. JSON is an 
easier-to-use alternative to XML.

//creating a JSON object
var emp={
 "firstname":"veeru"
};
 
To read data from the JSON object, use the property names
var name=emp.firstname;

ex  :
    var emp = {
                "first": "veeru",
                "last": "rallabandi"
            };

            var result = 'first Name is ' + emp.first + "<br/>" + 'Last Name is ' + emp.last;
            $("#first").html(result);

* JSON Arrays : What if you want to store more than one employee data in the JSON object. This is when JSON arrays
can be used. A JSON array can contain multiple objects.

To create a JSON array
1. Wrap the objects in square brackets
2. Each object must be separated with a comma

Ex:

   //JSON arrays

            var emp = [{
                "first": "veeru",
                "last": "rallabandi"
            },
            {
                "first": "xyz",
                "last": "abc"

                }];

            $("#first").html("First Name is "+emp[1].first);//calling

* Nested JSON object : you can also store multiple employees in the JSON object by nesting them..

19)Convert JSON object to string:
==================================
* JSON.stringify() method converts a JSON object(or array) into a string

Ex: var emp=[{
-----
},
{
----
}
];

var jsonstring=JSON.stringify(emp);
$("#result").html(jsonstring)

* JSON.parse() method converts a JSON string to JSON array

Ex:

$(document).ready(function () {
        var json = [{ "first": "veer" }, { "first": "veerababu" }];

        var output = JSON.parse(json);

        var result = ''
        $.each(function (i, value) {
            result += "First Name :" + value.first,
                result += "first Name: " + value.first
        });
        $("#demo").html(result);
    });


20) Convert JSON string to net object:
====================================
* Serialize() method of JavaScriptSerializer class converts .NET object to a 

-> How to convert .NET object to JSON string
ex:
emp class:
public class Emp
{
   public string Name{get;set;}
}

web.apsx
Emp e1=new Emp{
 Name="veera"
};
Emp e2=Emp{
Name="rallabandi"
};

List<Emp> list=new List<Emp>();
list.add(e1)
list.add(e1);
JavaScriptSerializer js=new JavaScriptSerializer();
string output=js.Serialize(list);
Response.write(output);

* Serialize() method of JavaScriptSerializer class converts a .NET object to a JSON string

* Deserialize() method of JavaScriptSerializer class converts a JSON string to .NET object

Ex: string oupput="[{\"name\":\"veer"\}]"
JavaScriptSerializer js=new JavaScriptSerializer();
List<Emp> list=(List<Emp>)js.Deserialize(js);
foreach(Emp e in list)
{
  Response.write(e.name);
}

21) Jquery DOM manipulation methods:
=====================================
What are JQuery Dom manipulation methods
How to set,retrieve & remove attribute values using jquery.

* JQuery DOM manipulation methods manipulate the DOM in some manner

*JQuery attr method is used to set or retrieve attribute values of html elements.

*Retrieves the title attribute value of the first matching element
$('div').attr('title')


Link : https://jqueryvalidation.org/documentation/#link-list-of-built-in-validation-methods

Note: JavaScriptSerializer class is present in System.Web.Script.Serialization namespace


https://code.tutsplus.com/tutorials/easy-form-validation-with-jquery--cms-33096


* 

* Select the title attribute value for the title attribute of all the elements to "new div title"

$('div').attr('title','new div title')

* If you want to set the same value for the title attribute of all the elements, then there is no need to loop
through each element. To set a different value for the title attribute, then you need to loop through each element.


Ex:

   $(document).ready(function () {
        // var divs=$('div')
        //to write divs.each(function(i){ instead of $('div').each(
        $('div').each(function (i) {
            $(this).attr('title','DIV'+(i+1)+'Title')
        });
        $('div').each(function () {
            alert($(this).attr('title'))
        });
    });


* How to set multiple attribute values
* Using a JSON object to set multiple attribute values

ex: 
        var config = {
            'title': 'New Div title',
            'style': 'border:3px solid red'
        };

        $('div').attr(config);

        var res = '';

        $('div').each(function () {
            res += 'title' + $(this).attr('title') + '<br/>';
            res += 'style' + $(this).attr('title') + '<br/>';
          

        });

        $("#result").html(res);
    });

* Instead of creating a separate JSON object(config) and then passing it to attr() method,
you can create the JSON object inline

$('div').attr({
'title':'new div',
'style':'border:3px solid red;'
})

* You can also use method chaining to set multiple attribute values
$('div').attr('title','new dive tile').attr('style','border:3px solid red;').a

* remove an attribute using Jquery removeAttr() method
$('div[title]').removeAttr('title');


22) JQuery wrap elements:
==========================

* JQuery methods to wrap & unwrap elements. Since these methods modify DOM, they belong to DOM
manipulation category.
->wrap
->unwrap
->wrapAll
->wraplanner

wrap-->Wrap an HTML structure around each element in the set of matched elements.

ex: 
<style>
    .container{
        background-color:red
    }
</style>

<script>
    $(document).ready(function(){
      $('div').wrap("<div class=container></div>");
    });

* unwrap -- Remove the parents of the set of matched elements from the DOM

* wrapAll -- Wrap an HTML structure around all elements in the set of matched elements 

*wrapInner --- Wrap an HTML structure around the content of each element in the set of matched elements.

23) Jquery append elements
========================

To append elements : append() or appendTo()
To prepend elements : prepend() or prependTo()

* since these methods modify DOM, they belong to DOM manipulation category

Ex: $('div').append('<b>Tutorials</b>')  --->o/p: My name tutorial
                (OR)
$('<b>Tutorials</b>').appendTo('#div1');

* What is the difference b/w append & appendTo
--> Both these methods perform the same task. The only difference is in the syntax. with append method we first specify the target elements
and then the content that we want to append, where as we do the opposite with appendTo method.
ex:   $('<b>Tutorals</b>').appendTo($("#div1"))

prepend :
========
$('div').prepend('<b>T</b>'); or $('<b>T</b>').prependTo('div');

* wt is the difference b/w prepend & prependTo
-->Both these methods perform the same task. The only difference is in the syntax. With prepend method we first specify the target
elements and then the content that we want to prepend, where as we do the opposite with prependTo method.

Prepend--beginning inserted
append --ending inserted

* Jquery append exissting element : these methods(append,appendTo,prepend,prependTo) can also select an element
on the page and insert it into another
Ex: $('div').append($('#span'));


24) Jquery insert element before & after:
=========================================
* To insert an element before another element
before
insertBefore
Ex: $('div').before('<h1>hello</h1>') or ('<h1>hello</h1>').insertBefore($('div'))

* To insert an element after another element
after
insertAfter

Note : How to insert existing element before or after another element: These methods (before,insertBefore,after, insertAfter)
can select an existing element on the page and insert it before or after another element.

Ex: $('div').after($('span'))---$('div').after($(selector))

25) Jquery add or remove class:
=============================
* hasClass -- Returns true if an element has the specified class otherwise false
* addClass -- Adds one or more specified classes. To add multiple classes separate them with a space.
* removeClass-- Removes one or multiple or all classes. To remove multiple classes separate them with a space. To remove all classes, don't 
  specify any class name.
*toggleClass -- Toggles one or more specified classes. If the element has the specified class then it is remove, if the
                class is not present then it is added.


Ex:  $("#btn").click(function () {
            $("#first").addClass('adddemo')
        });

Ex: $("#first").toggleClass('adddemo add1')

26) $.each & .each
===================
In JQuery there are 2 versions of each() method
1).each()
2)$.each() or jQuery.each()

Note : $ is shortcut for jQuery

* wt is difference:
--> .each() method is used to iterate over the items in a jQuery collection where as $.each() method
is used to iterate over javascript objects or arrays.

Ex:

var result = '';
        $("li").each(function (index, ele) {
            result += 'Index' + index + ' element' + $(ele).text()//also using--$(this)
        });

        $("#first").html(result);


ex: $.each()
var intarr=[10,20]
var result=''
$.each(intarr,function(index,element){
result+='INdex'+ index+', value '+element+'<br/>';
});
$("#result").html(result)

* $.each() function is also used to iterate over JavaScript object properties..

27) Jquery map method
===================
* Just like jquery each() method, map() method is also used to iterate over matched
elements.

* In general, if you want to create an array or concatenated string based on all matched
elements in a jQuery selector, it is better to use map() over each() method.
ex:

 alert($('li').map(function (index, element) {
            return $(element).text();
        }).get());


Ex: 

    $("#btn").click(function () {


            alert($('li').map(function (index, element) {
                return $(element).text();
            }).get().join('|'));
        });


28) Difference b/w each & map in Jquery:
=========================================
$.map
=====
* map method can be used as an iterator.
* Returns a new array
* The order of callback arguments -- element, index.
$.map(elems,function(){element,index},arg)
* Does not have a way to terminate the iteration.

$.each
=======
* Each method is an immutable iterator.
* Returns the original array
* The order of callback arguments - index,element.
$.each(elems,function(){index,element},arg)
* Return false to terminate the iteration.


Ex:
 var intarr = [3, 2, 5]

        function Demo1(index,element) {
            return element * 5;
        }

        function Demo2(index, element) {  //element --index --0,1 so change--element,inde
            return element * 5;
        }

        var res1 = $.each(intarr, Demo1);----3,2,5
        var res2 = $.map(intarr, Demo2);---15,10,25

        document.write(res1 + '<br/>' + res2);

29)Jquery change event:
======================
* Change event is fired when an element value changes. All the following elements fire
this event
1.input
2.textarea
3.select

* select, radio buttons & checkboxes fire the change event as soon as a selection is made, where as the other element types wait until they loose
focus.

Ex:
$("#city").change(function () {
            var selectedValue = $(this).val();  //if(selectedValue==='Select')
                                                      selectedValue='plz select a city'
            $("#demo").html(selectedValue);
        });


*input():function

  $("input").change(function () {
            var result = '';
            if (result == ' ') {
                result = $(this).val();
            }
            else {
                result += ',' + $(this).val();
            }

            $("#demo").html(result);
        });



30)Jquery mouse events:
=======================
* When the mouse is over the help icon, we want to display the help text, when the 
mouse is out, hide the help text.

Ex:


        $("#btn").mouseover(function () {  //$("p[id='second']") is also using
            $("#second").fadeIn(500)
        }).mouseout(function () {
            $("#second").fadeOut(500)
        });
//Html
    <table>
        <tr>
            <td>FirstName</td>
            <td><input type="text"/></td>
            <td><input type="button" id="btn" value="?"  class="btn-danger"/></td>
            <td ><p id="second" style="display:none">Enter fields</p></td>
        </tr>
        
    </table>


* mouseenter & mouseleave events can also be used

$(document).ready(function(){
 $("#btn").mouseover(function () {  //$("p[id='second']") is also using
            $('#'+getDivId(this)).fadeIn(400);
            $(this).css('cursor','pointer');
        }).mouseout(function () {
            $('#'+getDivId(this)).fadeOut(400);
        })

        function getDivId(helpid){

           var helpid=$(helpid).attr('id');
           return helpid.replace('img','div'):
        }
});

* We can also achieve the same using hover. hover() function accepts two function arguments, one for mouseenter
event & one for mouselease event.
E: $(selector).hover(handlerIn,handlerOut)

is a shorthand for
$(selector).mouseenter(handlerIn).mouseleave(handlerOut)

31)Jquery event Object
=====================
* Whenever an event (like click,mouseover, mouseout etc)occurs, the relevant data about that event is placed into the event object.

Ex: the event object contains event data like the x & y coordinates of the mouse pointer when the event occured, the HTML element that fired the event,
which mouse button is clicked etc..

* Obtaining the event object is straightforward. The event object is always passed to the event handler method.

$(document).ready(function(){
$("#btn").click(function(){
   get(event);
}).mouseover(function(){
   get(event);
}).mouseout(function(){
 get(event):
});

function get(event){
var details='event'+event.type+event.target.type
$("#demo).html(details)}

* Cross-browser solution: Convert Javascript event object to JQuery event object using 
$.event.fix(). This code should work in all browsers include internet exploxer 8 and
earliser versions.
Ex var e=$.event.fix(event);

32)Jquery to detect which mouse button clicked
==============================================
* With raw Javascript event object : Depending on the browser, event.button or event.which properties of the event object are used to determine which mouse button
is clicked.


LInk , go to the code :  https://csharp-video-tutorials.blogspot.com/2015/04/jquery-to-detect-which-mouse-button.html

ex;
 function whichMouseButtonClicked(event) {
            var whichButton;
            if (event.which) {
                switch (event.which) {
                    case 1: whichButton = "Left Button Clicked"; break;
                    case 2: whichButton = "Middle Button Clicked"; break;
                    case 3: whichButton = "Right Button Clicked"; break;
                    default: whichButton = "Invalid Button Clicked"; break;
                }
            }
            else {
                switch (event.button) {
                    case 1: whichButton = "Left Button Clicked"; break;
                    case 4: whichButton = "Middle Button Clicked"; break;
                    case 2: whichButton = "Right Button Clicked"; break;
                    default: whichButton = "Invalid Button Clicked"; break;
                }
            }

            document.getElementById('demo').innerHTML = whichButton;
        }


34)Binding event handler in jquery
=================================
* One way to bing event handlers to events is by using the jQuery shorthand functions like .click,.mouseover etc.
Bind method is another way of doing the same.

* Binds click event handler to the button--btn
$("#btn).bind('click',function(){
 $('#div').html('button clicked');
});


* Binds multiple event handlers to the button- btnClickMe. If required, the event object
can also be passed to the event handler

* use the unbind() method to unbind the event handler
$('#btn).unbind('mouseover');
* To unbind all the event handlers of an element, use unbind() method without any
parameters
$('#btn').unbind();

*event.type=="mouseover"

Note : If you are using jQuery 1.7 or higher, you should be using on() & off() methods
instead of bind() and unbind() methods.

Ex:
$('#btn').click(function(){
$('#btnclick').bind('mouseover',function(){
$(this).addClass('ButtonStyle');
})
)};

same as unbind also.

     $(document).ready(function () {
            $('#btnClickMe').bind('click mouseover mouseout', function (event) {
                if (event.type == 'click') {
                    $('#divResult').html('Button Clicked at '
                        + 'X = ' + event.pageX + ' Y = ' + event.pageY);
                }
                else if (event.type == 'mouseover') {
                    $(this).addClass('ButtonStyle');
                }
                else {
                    $(this).removeClass('ButtonStyle');
                }
            });

            $('#btnEnableMouseOverEffect').click(function () {
                $('#btnClickMe').bind('mouseover', function () {
                    $(this).addClass('ButtonStyle');
                });
            });

            $('#btnDisableMouseOverEffect').click(function () {
                $('#btnClickMe').unbind('mouseover');
            });
        });


Important link : https://csharp-video-tutorials.blogspot.com


34) Binding event handlers using jquery on method:
==================================================
also using, bind-on()
            unbind() - off() in jquery 1.7 higer

* We are binding a single anonymous function as the event handler for all the 3 events.
1. click
2. mouseover
3. Mouseout
* Jquery shorthand functions(.click,.mouseover,.mouseout etc.)call on() method behind the
scenes.

3 different ways of binding event handlers in jQuery.
1. using Jquery shorthand functions(.click,.mouseover,.mouseout etc.)

2. With jQuery version<1.7,bind() method can be used
element.bind('click',function(){...})

3. With jQuery version 1.7 or higher, on() method can be used
element.on('click',function(){...});

* on() method is prefered method for attaching event handlers.


36) jquery add event handler to dynamically created element:
============================================================
* Dynamically create new list item(li), attach a click event handler & add it ot to the unordered list(ul).


37)jQuery event delegation:
===========================
* Event delegation allows us to attach a single event lister, to a parent element that will fire for all descendants matching a selector, whether those descendants exist
now or are added in the fututre. Both on() and delegate() functions allow us to perform event delegation.
* you could use on() or delegate() function for event delegation. If you are using jqukeryk 1.7 or higer version, jquery recommends to use on() over delegate function.


* To stop event delegation you can use off() or undelegate() functions. If you are using jQuery1.7 or 
higher version, jQuery recommends to use off() over undelegate() function.


38)jQuery live function:
======================
*  Another way to perform event delegation is by using live() function.
* with on() and delegate() functions the event gets bubbled up to the specified parent element, where as with live() function the event gets bubbled up all the way to 
the document object.
* To perform event delegation we are using live() function and to stop event delegation we are using die() function.

* live() function is deprecated in jQuery 1.7 and completely removed in jQuery 1.9.
Everything that can be achieved with the following three methods can be achieved by using .on() function
live()
bind()
delegate()
1.7 or above ---use on() function


39)jquery execute event only once:
===================================
*If you want to execute the click event handler only once, then you will have to explicitly remove the click event handler. The following example removes the click event handler using off() function, after the alert is displayed.

Ex;  $(document).ready(function () {
        $("#btn1").on('click', function () {
            alert("button clicked");
            $(this).off();
        });
    });

* jQuery one() function does exactly the same thing. The click event is raised only once. On the first click, JavaScript alert is 
displayed, but on subsequent clicks nothing happens.


Note: one() function executes the handler at most once per element per event type. 
click mouseover & mouseout events are executed atmost once for each button element.


40) How to check if event is already bound:
+===========================================

Why is it important to check if an event is already bound
To prevent attaching event handler multiple times

The following example checks if a click event handler is already bound. If it's not already bound, then a click event handler is attached.


* why is it important to check if an event is already bound
To prevent attaching event handler multiple times

* This only works if you have attached event handlers using jQuery. This will not work if you have
attached event handlers using raw JavaScriptor or element attributes.


* Another way to prevent attaching event handlers multiple times is 
by using jQuery off() and on() methods. The off() method ensures that all existing click event 
handlers of the button are removed before again adding a new click event handler using on() method.

$('#btn').off('click').on('click', function () {
    alert('Button Clicked');
});


41)jquery preventdefault:
===========================
In some situations you may want to prevent these default actions of the browser. For example some of the websites prevent you from right clicking on the page. Disabling right click is annoying users. Many people say they disabled right click for security, because they do not want their content to be copied. But if you disable JavaScript in the browser, you will still be able to right click and copy the content. So you are achieving nothing by disabling right click.  

ex:  $(document).ready(function () {
            $(this).on('contextmenu', function (e) {
                e.preventDefault();
                $('#divResult').append('Right click disabled<br/>')
            });
        });


42)jquery scroll event:
========================

scroll event is raised when the user scrolls to a different place in the element. It applies to window objects, but also to scrollable frames and elements with the overflow CSS property set to scroll.

ex:
 $(document).ready(function () {
            $('div').scroll(function () {
                $('h3').css('display', 'inline').fadeOut(1000);
            });
        });

43) Jquery image gallery:
=========================
* how to create an image gallery with thumbnails using jQuery.
* When you click on the image thumnail, the respective image should be displayed in the main section of the page.

Ex:
$(document).ready(function () {
            $('#divId img').on({
                mouseover: function () {
                    $(this).css({
                        'cursor': 'hand',
                        'border-Color': 'red'
                    });
                },
                mouseout: function () {
                    $(this).css({
                        'cursor': 'default',
                        'border-Color': 'grey'
                    });
                },
                click: function () {
                    var imageURL = $(this).attr('src');
                    $('#mainImage').fadeOut(1000, function () {
                        $(this).attr('src', imageURL);
                    }).fadeIn(1000);
                }
            });
        });

44)optimise jquery image gallery:
=================================
 var main = $("img1");
        var height = parseInt(main.attr('height'));
        var width = parseInt(main.attr('width'));
        $("#btnAdd").click(function () {
            height += 100;
            width += 100;
            main.animate({
                'height': height,
                'width': width
            });
        });
        $("#btnUndelegate").click(function () {
            height -= 100;
            width -= 100;
            main.animate({
                'height': height,
                'width': width
            });
        })
    })

45) jquery image slideshow with thumbnails:
==============================================
we will discuss creating a simple image slideshow using jQuery. We will be using setInterval() and clearInterval() JavaScript methods to achieve this

* setInterval(func,delay)-- Executes a specified function, repeatedly at speicified time interval.
* clearInterval(intervalID)--cancels the repeated execution of the method that was set up using setInterval() method. intervalID is the identifier of the repeated action
you want to cancel. This ID is returned from setInterval() method.

46)jquery animate function:
=============================
Syntax of jquery animate function
.animate( properties [, duration ] [, easing ] [, complete ] )

Ex: $("#mydiv").animate({'font-size':'50'},2000);

Animate function has 4 parameters. Only the first parameter (properties) is the required parameter. Rest 3 are optional.

Parameter	Description
=========       ===========
properties	An object of CSS properties and values
duration	The duration for animation in milliseconds. Default is 400.
easing	Easing function to use for the transition. Default is swing. You could also use linear.
complete	A function to call once the animation is complete


ex: 
 $(document).ready(function () {
        $("#btn").click(function () {
            $("#mydiv").animate({
                'font-size': 50
            }, 2000);
        })
    })

html:
=====
 <input type="button" id="btn" value="Animate" />
    <br />
    <div id="mydiv">
        Jquery animation
    </div>


what is jquery easing:
* Easing is a technique where the speed and/or direction of animation are 
changed while the animation is in progress. Easing can make the animation start off slow and gradually speed up, start up fast and gradually slow down, and a whole host of other effects. The difference 
between linear and swing easing is very subtle.


ex: 
Please note: By default, all HTML elements have a static position, and cannot be moved. To modify the position , set the CSS position property of the element to fixed, absolute or relative.

  $(document).ready(function () {
            $('#myImage').click(function () {
                $(this)
                    .animate({ 'left': '300' })
                    .animate({ 'top': '200' })
                    .animate({ 'left': '10' })
                    .animate({ 'top': '10' });
            });
        });

html:
 <img id="myImage" height="100" width="100" style="position:absolute"
         src="/Images/Tulips.jpg" />

47)animation queue:
===================

* When several calls to animate() method are chained together. 
By default these calls are placed into a queue to be executed one after the other in series rather than executing all of them simultaneously in parallel. 
The name of this queue is fx.

*Each HTML element has its own queue. With the following code there will be 5 calls to animate method placed in the queue of each div element. 
This means both div elements (myDiv1 & myDiv2) may start to execute the first call to animate method more or less at the same time. However, from the given queue the queued methods are executed one after the other in series.


* code finds the total number of method calls waiting in the queue. 
While the first call to animate method is being executed, 
the other calls are added to the queue and waiting to be executed one after the other in sequence.


To globally disable all animations
$.fx.off = true or jQuery.fx.off = true


2 variations of animate methods:

.animate(properties[,duration][,easing][,complete])
.animate(properties,options)

 *If you want the calls to animate() to be executed simultaneously in parallel, then set queue option to false. Modify the jQuery code as shown below.

$('#myDiv1')
    .animate({ 'width': 500 }, { duration: 1500, queue: false })
    .animate({ 'padding': 20 }, { duration: 1500, queue: false })

* an easier way to animate multiple css properties simultaneously in parallel, is to include
all those css properties in a single JSON object.
$('#mydiv1').animate({
  'width':500,
  'padding':20,
  'font-size':50,
  'border-width:10,
  'opacity':1
},1500);

48) simple jquery progress bar:
==============================
* how to create a simple animated jquery progress bar using animate() function.
Ex:

 $(document).ready(function () {
            $('#myButton').click(function () {
                animateProgressBar($('#ddlPercentage').val());
            });

            function animateProgressBar(percentageCompleted) {
                $('#innerDiv').animate({
                    'width': (500 * percentageCompleted) / 100
                }, 3000);

                $({ counter: 1 }).animate({ counter: percentageCompleted }, {
                    duration: 3000,
                    step: function () {
                        $('#innerDiv').text(Math.ceil(this.counter) + ' %');
                    }
                })
            }
        });


49)Optimize jquery progress bar:
================================
At the moment the progress bar always counts from 1. For example
1. When you select 30%, it starts to count from 1 to 30 which is good.
2. Now if you select 70%, it starts again from 1 and counts all the way till 70, instead of continuing to count from 30 to 70.

The following code counts from the previous point. For example
1. If you select 30% first, it starts to count from 1 to 30. Now if you select 90, it counts from 30 to 90.
2. At this point, if you select 20%, it counts down from 90 to 20.


 $(document).ready(function () {
        $('#myButton').click(function () {
            animateProgressBar($('#ddlPercent').val());
        });

        function animateProgressBar(currentPercentage) {
            $("#innerDiv").animate({ "width": (currentPercentage * 500) / 100 }, {
                duration: 3000,
                step: function (now, tween) {
                    $("#innerDiv").text(Math.ceil((now / 500) * 100) + ' %');
                }
            });
        }
    });



Note:
* now	contains the value being animated
* tween	is a complex object and contains several properties. A few are listed below. For the complete list set a break point and inspect the object

* elem	The DOM element being animated
* now	The value the animation is currently at
* end	The value the animation will end at


50) Jquery show hide password:
===============================
* One of the simplest ways of achieving this is by changing the type attribute of the password field depending on the checked status of Show password checkbox
1. If the Show password checkbox is CHECKED change the type to text
2. If the Show password checkbox is NOT CHECKED change the type to password


The problem with the above approach is that it does not work in IE 8 and earlier versions. This is because with IE8 and earlier versions the type attribute of input elements cannot be changed once set. The following code works in all browsers including IE8 and earlier versions. 

When Show password checkbox is clicked
1. Retrieve the value the from the password textbox and store it in a variable for later use.
2. Delete the password input filed. 
3. If the "Show password" checkbox is CHECKED, then add a new input filed of type text, else add a new input filed of password. In both the cases set the value attribute of the input element = the variable created in Step 1.

51)jquery increase decrease font size using jquery:
====================================================
*  how to increase, decrease and reset font size using jQuery.

52)jquery floating div:
========================
* We want the div element in the sidebar to be floating and always visible as we scroll down the page.


* 'position':'fixed'
 -- A fixed position element is positioned relative to itself
* 'position':'relative'
-- A relative position element is positioned relative to itself.


53)Jquery AJAX Load:
====================
* What is AJAX
AJAX stands for Asynchronous JavaScript and XML, and allow parts of the page to be updated without having to reload the entire page. 

Syntax 
load( url [, data ] [, complete ] )

*
Parameter	Description
=========       =============
url	        Required. URL to which the request is sent
data	        Optional. A JSON object or string that is sent to the server along with the request
complete	A callback function that is called when the request completes



53) jquery ajax load aspx page:
================================
When a text box receives focus, the help text associated with that field should be loaded from the server and displayed. When the focus is lost the help text disappears. The help text is stored in the database.

We will be using the jquery ajax load function to achieve this. Here is how this is going to work
1. The ASPX page loads data from the SQL Server database using ADO.NET and C#
2. The HTML page loads HTML data from the ASPX page using jQuery AJAX load function


54)jquery ajax load aspx page:
===============================
* When a text box receives focus, the help text associated with that field should be loaded from the server and displayed. 
When the focus is lost the help text disappears. The help text is stored in the database.

* first connect to datababse
Include a connection string in the web.config file to your database.
<add name="DBCS"
      connectionString="server=.;database=SampleDB;integrated security=SSPI" />


55)jquery load callback function:
=================================
* Syntax
.load( url [, data ] [, complete ] )

complete parameter is a callback function that is executed when the request completes. The callback function has 3 parameters.

CallbackFunction(response, status, xhr)



ex:

If you want the code in the callback function to execute only if these is an error, you can do so using status parameter as shown below.
$('#' + helpDiv + 'HelpDiv').load('GetHelpText.aspx', { HelpTextKey: helpDiv },
    function (response, status, xhr) {
        if (status == 'error') {
            var errorMessage = 'status : ' + xhr.status + '<br/>';
            errorMessage += 'status text : ' + xhr.statusText + '<br/>';
            errorMessage += 'response : ' + response;
            $('#divError').html(errorMessage);
        }
    });


56)jquery ajax get function:
===============================
What is the difference between jQuery get and load functions
1. jQuery load function can be used to load only the HTML data from the server, where as jquery get function can be used to load any type of data (xml, json, script, or html).

2. jQuery load function may issue a get or post request depending on whether the data parameter is specified or not. POST method is used if data is provided, otherwise, GET is used. On the other hand jquery get method always issues a GET request.

3. With load function we specify a selector first. The HTML content retrieved from the server is automatically inserted into the DOM elements matched by the selector.
$('selector').load('url', 'data');

With get function we do not specify any selector first, instead we will make use of the callback function to insert the data received from the server into the DOM elements.


jQuery get function:
====================
$.get('url', 'data', function (response) {
    $('selector').html(response);

});

          OR
jQuery load function:
=====================
$('#'+helpDiv+'HelpDiv').load('GetHelpText.aspx',{HelpTextKey:helpDiv});


$('selector').load('url','data');
             OR
$.get('url','data',function(response){
	$('selector').html(response);
});

              OR


ex: get
var helpDiv = $(this).attr('id');
                $.get('GetHelpText.aspx', { HelpTextKey: helpDiv }, function (response) {
                    $('#' + helpDiv + 'HelpDiv').html(response);
                });

58)jquery ajax get xml data:
=============================
* how to load XML data from the server using jQuery get function

change code in GetHelpText.aspx.cs
=================================
 Response.ContentType = "text/xml";
            XmlSerializer xmlSerializer = new XmlSerializer(typeof(HelpText));
            xmlSerializer.Serialize(Response.OutputStream,
                GetHelpTextByKey(Request["HelpTextKey"]));


59)jquery make a post request:
==============================
* To make a get request we use jquery get function. Jquery load function can be use to make either
a get or post request, depending on whether the data parameter is specified or not. POST method is used if data
is provided, otherwise , GET is used.

*Another method that is available in jQuery to make a post request is post method.

jQuery post function syntax
$.post( url [, data ] [, success ] [, dataType ] )

*  CHANGE THE FOLLOWING LINE FROM
$.get('GetHelpText.aspx', { HelpTextKey: helpDiv }, function (response) {

TO
$.post('GetHelpText.aspx', { HelpTextKey: helpDiv }, function (response) {


*A lot of people keep asking what is the difference between GET and POST in AJAX
Whether you make GET and POST request using AJAX or by some other means is irrelevant, the differences are still the same.



60)jquery ajax method:
======================
* The other methods that are available in jquery to make ajax requests are load(), get() and post(). We discussed these methods in detail in the previous sessions of jQuery tutorial video series. All these methods are wrapper methods and use ajax() method under the hood. In Visual Studio, if you right click on any of these methods and select "Go To Definition" from the context menu, you can see that these methods call ajax() method.

* The wrapper methods are easier to use but they do not provide much flexibility. 
If you want to have complete control on configuring the ajax request use ajax() method.

Syntax of jquery ajax method
$.ajax( [ settings ] )

* settings is a JavaScript object that we use to configure the Ajax request. For the list of all available options please check the jquery ajax method documentation
http://api.jquery.com/jquery.ajax/

ex:
     //using ajax() method

                var helpDiv = $(this).attr('id');
                
                $.ajax({
                    url: 'GetHelpText.aspx',
                    data: { HelpTextKey: helpDiv },
                    method:'get',
                    success: function (response) {
                        $('#' + helpDiv + 'HelpDiv').html(response);
                    }
                });


61)calling asp net web services using jquery ajax:
==================================================



62)Handling json data returned from asp.net web services:

There are 2 approaches to make an asp.net web service return JSON data and consume it using jQuery AJAX.

Approach 1 : With Approach 1, the web service code does not change in any way. 

We need to add/change the following options of the jquery request object.

1. Add contentType option and set it to application/json; charset=utf-8 to specify that we will be sending a JSON string.

2. Use JSON.stringify() method to convert the data you are sending to the server to a JSON string

3. Change the dataType to json, to specify that you are expecting JSON data from the server

4. Finally modify the success function to display Name, Gender and Salary property values from the JSON object.

Please note : By defaut, the JSON object returned by the web service has a property d. So to retrieve Name property value, use data.d.Name.


Approach 2 : With Approach 2 both the web service code and the jQuery code need to change.

Modify the ASP.NET web service as shown below to return JSON data

. Serialize the employee object to JSON string using JavaScriptSerializer and write it to the response stream.

2. Since the method is not returning anything set the return type of the method to void.


1. contentType option is no longer required, so you may remove it.
 


2. You don't have to convert the data that you are sending to the server to JSON string, so you may remove JSON.stringify() method

3. The JSON object returned from the server will not have property d, so you don't have to use d on the data object. For example, you can now retrieve Name property simply by using data.Name.


64)save data using asp net web services & jquery ajax:
======================================================
* When Add Employee button is clicked we want to post form data to the asp.net web service 
and the web service should save the data to the database table.

65)check if username exists in database with ajax:
====================================================

